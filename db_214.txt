SQL - язык структурированных запросов

*.db, *.db2, *.sqlite, *.sqlite2


SELECT [ALL | DISTINCT] {*|столбец_1[, столбец_2]}
FROM таблица_1 [, таблица_2]
WHERE условие
	AND или OR
	=, ==, <>, !=, <=, <, >, >=
	выражение [NOT] BETWEEN начальное_значение AND конечное_значение 
	выражение [NOT] LIKE шаблон_строки
		% - любое количество символов
		_ - один любой символ
	выражение [NOT] GLOB регулярное_выражение	
		* - соответсвует любому кол-ву символов (могут отсутствовать)
		? - может быть может не быть
		. - соответствует одному одиночному символу
		[символы] - один любой символ из списка [abc]
		[начальный_символ-конечный_символ] - один любой символ из заданного диапазона [a-zA-Z0-9]
		[^символы] - ни один из заданных символов [^abc] [^0-9]
	выражение IS [NOT] NULL	
	выражение [NOT] IN (набор_значений | выражение)
GROUP BY (группировать по)
HAVING условие
ORDER BY col_name | col_number [ASC | DESC]
LIMIT количество_строк OFFSET смещение
LIMIT [смещение,] количество_строк


INSERT INTO имя_таблицы [(столбец_1 [, столбец_2])]
VALUES (значение_1 [, значение_2])	

	
INSERT INTO имя_таблицы [(столбец_1 [, столбец_2])]	
SELECT список_столбцов
FROM список таблиц	
WHERE условие
	

UPDATE имя_таблицы
SET столбец_1=выражение_1, столбец_2=выражение_2
WHERE условие


DELETE FROM имя_таблицы
WHERE уловие
	
разработчики логической базы данных
разработчики физической базы данных

	
Функции агрегирования
SUM - только с числами
AVG - только с числами
COUNT
MIN
MAX

однострочный запрос: >, <, >=, <=, <>, =
многострочный запрос: [NOT] IN


EXISTS 

SQLALCHEMY ORM

pip install sqlalchemy

models
	__init__.py
	database.py
	group.py
	lesson.py
	student.py
	
create_database.py	

pip install faker

templates
	home.html
	
	header.html
	main.html
	footer.html
	
	dialogs.html
	
	page.html
	about.html
	
	
pip install flask

flsite
	first.py
	templates
		index.html
		about.html
		base.html
		contact.html
		login.html
		add_post.html
		post.html
	static
		css
			style.css
FDataBase.py


int - должны присутствовать только цифры
float - вещественное число
path - любые допустимые символы URL + /

http://127.0.0.1:5000/contact?username=admin&email=admin%40localhost&message=%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B5+%D0%BD%D0%B0+%D1%81%D0%B0%D0%B9%D1%82

http://127.0.0.1:5000/contact


flash
get_flashed_messages

import os
os.urandom(20).hex()


from flsite.first import create_db
create_db()

/post/<int:id_post>
http://127.0.0.1:5000/post/1

tasks
	static
		css
			style.css
	templates
		base.html
		index.html
	app.py
	
pip install flask-sqlalchemy

pip install django

first

Создание нового проекта
django-admin startproject password_generator_project

python manage.py runserver

python manage.py runserver 4000
python manage.py runserver 1.2.3.4:4000

Создание нового приложения
python manage.py startapp generator

static
	css
		style.css
templates
	generator
		home.html
		
		
http://127.0.0.1:8000/?length=2
http://127.0.0.1:8000/?length=3

python manage.py collectstatic

second
		
django-admin startproject personal_portfolio

python manage.py startapp skills
python manage.py startapp blog

pip intall Pillow

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser


third

django-admin startproject todos
python manage.py startapp todo

python manage.py migrate

models.CASCADE - если пользователь будет удален, то удалятся все его задачи
models.PROTECT - запрещает удалять пользователя, пока у него есть задачи
models.SET_NULL - задачи останутся в базе, даже при удалении пользователя, но значение в поле задачи изменится на NULL
models.SET_DEFAULT - задачи останутся в базе, даже при удалении пользователя, но значение в поле задачи изменится на значение по умолчанию

forms.py

fourth

django-admin startproject devsearch
python manage.py startapp projects
python manage.py startapp users

ForeignKey - один ко многим
ManyToManyField - многие ко многим
OneToOneField - один к одному

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py shell

from projects.models import Project

Project.objects.get(id=1)
Project.objects.filter(id=1)
Project.objects.filter(title__startswith="Website")
Project.objects.filter(title__contains="site")
Project.objects.filter(title__icontains="land")
Project.objects.filter(vote_total__gt=37)
Project.objects.exclude(id=1)

quit()

signals.py

safe

utils.py

http://127.0.0.1:8000/projects/?page=3

pagination.html


http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?page=2

http://127.0.0.1:8000/projects/
http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?search_query=web&page=2

message_form.html

fifth
django-admin startproject programming_blog
python manage.py startapp blog


str - любая не пустая строку, исключая символ "/"
int - любое целое число, включая 0
slug - ASCII-символы, символ дефиса и символ подчеркивания
uuid - цифры, латинские символы в нижнем регистре, дефис
path - любая не пустая строку, включая символ "/"
	
templatetags
	__init__.py	
	blog_tags.py